{"version":3,"sources":["resources sync /^/.//.*/.resource/.json$","components/test.js","components/test2.js","App.js","services/language.service.js","config/language.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Test","className","Test2","App","useState","data","lang","setLang","useEffect","key","langData","require","onChange","console","log","target","value","defaultValue","disabled","hello","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAA,IAAIA,EAAM,CACT,sBAAuB,GACvB,qBAAsB,IAIvB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,wRCbLY,MARf,WACC,OACC,yBAAKC,UAAU,cAAf,W,MCOaC,MARf,WACC,OACC,yBAAKD,UAAU,gBAAf,W,MC+BaE,MA7Bf,WAAgB,IAAD,EACQC,mBAAS,CAACC,KAAK,KADvB,mBACNC,EADM,KACDC,EADC,KAWb,OARAC,qBAAU,WACT,ICPiCC,EDO7BC,GCP6BD,ECJnB,KDKAE,MAAQ,YAAgBF,EAAjB,oBDOpBF,EAAQ,CAACF,KAAKK,MACd,IAMA,yBAAKT,UAAU,OACb,4BAAQA,UAAU,cAChB,gCACA,4BAAQW,SAPd,SAA8BpB,GAC5BqB,QAAQC,IAAItB,EAAEuB,OAAOC,QAMuBC,cAAY,EAACC,UAAQ,GAA7D,mBACC,4BAAQF,MAAM,OAAd,cACA,4BAASA,MAAM,MAAf,YAED,2BACGV,EAAKD,KAAKc,QAGf,kBAAC,EAAD,MACA,kBAAC,EAAD,QGnBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.ad003ef8.chunk.js","sourcesContent":["var map = {\n\t\"./aze.resource.json\": 14,\n\t\"./en.resource.json\": 15\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 13;","import React from 'react'\nimport './test.scss'\nfunction Test() {\n return (\n  <div className='txt--error'>\n   blabla\n  </div>\n )\n}\n\nexport default Test\n","import React from 'react'\nimport  './test2.scss'\n\nfunction Test2() {\n return (\n  <div className='txt--success'>\n   blabla\n  </div>\n )\n}\n\nexport default Test2\n","import React,{useEffect,useState} from 'react';\nimport DEFAULT_LANG from './config/language'\nimport LanguageService from './services/language.service'\nimport Test from './components/test'\nimport Test2 from './components/test2'\nimport './App.css';\n  \nfunction App() {\n  const [lang,setLang]=useState({data:''});\n\n  useEffect(()=>{\n   let langData=LanguageService(DEFAULT_LANG);\n    setLang({data:langData})\n  },[]);\n  \n  function languageEventHandler(e) {\n    console.log(e.target.value)\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <select>\n        <option onChange={languageEventHandler} defaultValue disabled>Select Language</option>\n         <option value='aze'>Azerbaijan</option>\n         <option  value='en'>English</option>\n        </select>\n        <p>\n          {lang.data.hello}\n        </p>\n      </header>\n      <Test/>\n      <Test2/>\n    </div>\n  );\n}\n\nexport default App;\n","import fs from 'fs'\nimport Path from 'path'\n\n\nexport default function GetLanguage(key) {\n  const resource=require(`../resources/${key}.resource.json`)\n  return resource;\n}","const languages=['en','ru','aze'];\nconst DEFAULT_LANG=languages[0];\n\nexport default DEFAULT_LANG","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}